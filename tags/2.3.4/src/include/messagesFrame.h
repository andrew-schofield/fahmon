/*
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU Library General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software
*  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/

/**
 * \file messagesFrame.h
 * The messages window.
 * \author Fran√ßois Ingelrest
 * \author Andrew Schofield
 **/

#ifndef _MESSAGESFRAME_H
#define _MESSAGESFRAME_H


#include "wx/frame.h"
#include "wx/textctrl.h"


#define PREF_MESSAGESFRAME_FRAMEWIDTH    wxT("MessagesFrame.FrameWidth") /**< Preference setting for the message window width */
#define PREF_MESSAGESFRAME_FRAMEWIDTH_DV 500 /**< Default value for the message window width */

#define PREF_MESSAGESFRAME_FRAMEHEIGHT    wxT("MessagesFrame.FrameHeight") /**< Preference setting for the message window height */
#define PREF_MESSAGESFRAME_FRAMEHEIGHT_DV 400 /**< Default value for the message window height */


/**
 * This class allows the user to see the messages generated by the app.
 * It can only be instanciated once.
 **/
class MessagesFrame : public wxFrame
{
protected:
	static MessagesFrame *mInstance; /**< The single instance of the MessagesFrame */

	wxTextCtrl *mTextCtrl; /**< The text control containing the messages */

	/**
	 * Contructor.
	 * Contructs the messages frame.
	 * @param parent Pointer to the parent window.
	 **/
	MessagesFrame(wxWindow *parent);

	/**
	 * Destructor.
	 **/
	~MessagesFrame(void);


	// --- Events
	/**
	 * Event: Manages the closing of the frame.
	 * We don't allow the user to destroy the window, we simply hide it.
	 * @param event The event itself. This is sent automatically.
	 **/
	void OnClose(wxCloseEvent& event);


public:
	// Singleton pattern
	/**
	 * Retrieve the instance of MessagesFrame.
	 * If an instance doesn't already exist, create it.
	 * @param parent The parent windows of type wxWindow.
	 * @return An instance of class MessagesFrame.
	 **/
	static MessagesFrame* GetInstance(wxWindow* parent);

	/**
	 * Destroy the instance of MessagesFrame.
	 * Only if an instance exists.
	 **/
	static void DestroyInstance(void);

	/**
	 * Show/Hide the frame.
	 **/
	void Toggle(void);

	/**
	 * A new message has been logged, it will be added only if the frame exists AND is visible.
	 **/
	static void OnNewMessage(void);


private:
	DECLARE_EVENT_TABLE()
};


#endif /* _MESSAGESFRAME_H */
